import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
import cloneDeep from 'lodash/cloneDeep';
import { update, deleteEntity, fetch, query, parseData, upload, publish, unpublish } from '../../entity';
import { Folder } from './folders';
import error from '../../core/contentstackError';
import FormData from 'form-data';
import { createReadStream } from 'fs';

/**
 * Assets refer to all the media files (images, videos, PDFs, audio files, and so on) uploaded in your Contentstack repository for future use.
 * These files can be attached and used in multiple entries. Read more about <a href='https://www.contentstack.com/docs/guide/content-management'>Assets</a>.
 * @namespace Asset
 */

export function Asset(http) {
  var _this = this;
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  this.stackHeaders = data.stackHeaders;
  this.urlPath = "/assets";
  if (data.asset) {
    Object.assign(this, cloneDeep(data.asset));
    this.urlPath = "/assets/".concat(this.uid);

    /**
     * @description The Update Asset call lets you update the name and description of an existing Asset.
     * @memberof Asset
     * @func update
     * @returns {Promise<Asset.Asset>} Promise for Asset instance
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).asset('uid').fetch()
     * .then((asset) => {
     *  asset.title = 'My New asset'
     *  asset.description = 'Asset description'
     *  return asset.update()
     * })
     * .then((asset) => console.log(asset))
     *
     */
    this.update = update(http, 'asset');

    /**
     * @description The Delete asset call will delete an existing asset from the stack.
     * @memberof Asset
     * @func delete
     * @returns {Object} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).asset('uid').delete()
     * .then((response) => console.log(response.notice))
     */
    this["delete"] = deleteEntity(http);

    /**
     * @description The fetch an asset call returns comprehensive information about a specific version of an asset of a stack.
     * @memberof Asset
     * @func fetch
     * @returns {Promise<Asset.Asset>} Promise for Asset instance
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).asset('uid').fetch()
     * .then((asset) => console.log(asset))
     *
     */
    this.fetch = fetch(http, 'asset');

    /**
     * @description The Replace asset call will replace an existing asset with another file on the stack.
     * @memberof Asset
     * @func replace
     * @returns {Promise<Asset.Asset>} Promise for Asset instance
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * const asset = {
     *  upload: 'path/to/file.png',
     * }
     *
     * client.stack({ api_key: 'api_key'}).asset('uid').replace(asset)
     * .then((asset) => console.log(asset))
     *
     */
    this.replace = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, params) {
        var response, _t;
        return _regeneratorRuntime.wrap(function (_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 1;
              return upload({
                http: http,
                urlPath: this.urlPath,
                stackHeaders: this.stackHeaders,
                formData: createFormData(data),
                params: params,
                method: 'PUT'
              });
            case 1:
              response = _context.sent;
              if (!response.data) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return", new this.constructor(http, parseData(response, this.stackHeaders)));
            case 2:
              throw error(response);
            case 3:
              _context.next = 5;
              break;
            case 4:
              _context.prev = 4;
              _t = _context["catch"](0);
              throw error(_t);
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[0, 4]]);
      }));
      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();
    /**
     * @description The Publish an asset call is used to publish a specific version of an asset on the desired environment either immediately or at a later date/time.
     * @memberof Asset
     * @func publish
     * @returns {Promise<Object>} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * const asset = {
     *  "locales": [
     *              "en-us"
     *              ],
     *   "environments": [
     *                "development"
     *               ]
     * }
     *
     * client.stack({ api_key: 'api_key'}).asset('uid').publish({ publishDetails: asset, version: 1, scheduledAt: "2019-02-08T18:30:00.000Z"})
     * .then((response) => console.log(response.notice))
     *
     */
    this.publish = publish(http, 'asset');

    /**
     * @description The Replace asset call will replace an existing asset with another file on the stack.
     * @memberof Asset
     * @func unpublish
     * @returns {Promise<Object>} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * const asset = {
     *  "locales": [
     *              "en-us"
     *              ],
     *   "environments": [
     *                "development"
     *               ]
     * }
     *
     * client.stack({ api_key: 'api_key'}).asset('uid').unpublish({ publishDetails: asset, version: 1, scheduledAt: "2019-02-08T18:30:00.000Z"})
     * .then((response) => console.log(response.notice))
     *
     */
    this.unpublish = unpublish(http, 'asset');

    /**
     * @description The References function will get all the references for the asset.
     * @memberof Asset
     * @func references
     * @returns {Promise<Array>} Array of references.
     * @param {Object} param - Query parameters
     * @example
     * client.stack({ api_key: 'api_key'}).asset('uid').getReferences({ include_publish_details: true })
     * .then((references) => console.log(references))
     */
    this.getReferences = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var param,
        headers,
        response,
        _args2 = arguments,
        _t2;
      return _regeneratorRuntime.wrap(function (_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            param = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
            _context2.prev = 1;
            headers = {
              headers: _objectSpread({}, cloneDeep(this.stackHeaders)),
              params: _objectSpread({}, cloneDeep(param))
            } || {};
            _context2.next = 2;
            return http.get(this.urlPath + '/references', headers);
          case 2:
            response = _context2.sent;
            if (!response.data) {
              _context2.next = 3;
              break;
            }
            return _context2.abrupt("return", response.data);
          case 3:
            throw error(response);
          case 4:
            _context2.next = 6;
            break;
          case 5:
            _context2.prev = 5;
            _t2 = _context2["catch"](1);
            throw error(_t2);
          case 6:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this, [[1, 5]]);
    }));
  } else {
    /**
     *  @description The Folder allows to fetch and create folders in assets.
     * @memberof Asset
     * @func folder
     * @returns {Promise<Folder.Folder>} Promise for Entry instance
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     * const asset = {name: 'My New contentType'}
     * client.stack({ api_key: 'api_key'}).asset('uid').folder().create({ asset })
     * .then((folder) => console.log(folder))
    */
    this.folder = function () {
      var folderUid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var data = {
        stackHeaders: _this.stackHeaders
      };
      if (folderUid) {
        data.asset = {
          uid: folderUid
        };
      }
      return new Folder(http, data);
    };

    /**
     * @description The Create an asset call creates a new asset.
     * @memberof Asset
     * @func create
     * @returns {Promise<Asset.Asset>} Promise for Asset instance
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * const asset = {
     *  upload: 'path/to/file.png',
     *  title: 'Title',
     *  description: 'Desc'
     * }
     *
     * client.stack({ api_key: 'api_key'}).asset().create(asset)
     * .then((asset) => console.log(asset))
     */
    this.create = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data, params) {
        var response, _t3;
        return _regeneratorRuntime.wrap(function (_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              _context3.next = 1;
              return upload({
                http: http,
                urlPath: this.urlPath,
                stackHeaders: this.stackHeaders,
                formData: createFormData(data),
                params: params
              });
            case 1:
              response = _context3.sent;
              if (!response.data) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", new this.constructor(http, parseData(response, this.stackHeaders)));
            case 2:
              throw error(response);
            case 3:
              _context3.next = 5;
              break;
            case 4:
              _context3.prev = 4;
              _t3 = _context3["catch"](0);
              throw error(_t3);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this, [[0, 4]]);
      }));
      return function (_x3, _x4) {
        return _ref3.apply(this, arguments);
      };
    }();
    /**
     * @description The Query on Asset will allow to fetch details of all or specific Asset.
     * @memberof Asset
     * @param {Object} params - URI parameters
     * @prop {Object} params.query - Queries that you can use to fetch filtered results.
     * @func query
     * @returns {Array<Asset>} Array of Asset.
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).asset().query({ query: { filename: 'Asset Name' } }).find()
     * .then((asset) => console.log(asset))
     */
    this.query = query({
      http: http,
      wrapperCollection: AssetCollection
    });
  }
  /**
   * @description The Download function will get downloadable file in specified format.
   * @memberof Asset
   * @func download
   * @returns {Array<AssetResponse>} Array of Asset.
   * @param {*} param.url The url for the asset to download
   * @param {*} param.responseType Optional parameter to specify the response type.
   * @example
   *
   * import * as contentstack from '@contentstack/management'
   * const client = contentstack.client()
   *
   * client.stack({ api_key: 'api_key'}).asset('uid').fetch()
   * .then((asset) => asset.download({responseType: 'blob'}))
   * .then((response) => // Write response data to destination file. )
   * @example
   *
   * import * as contentstack from '@contentstack/management'
   * const client = contentstack.client()
   *
   * client.stack({ api_key: 'api_key'}).asset().download({url: 'asset_url_to_download', responseType: 'blob'})
   * .then((response) => // Write response data to destination file. )
   */
  this.download = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref4) {
      var url, responseType, params, headers, requestUrl, _t4;
      return _regeneratorRuntime.wrap(function (_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            url = _ref4.url, responseType = _ref4.responseType, params = _ref4.params;
            _context4.prev = 1;
            headers = {
              headers: _objectSpread(_objectSpread({}, params), cloneDeep(this.stackHeaders)),
              responseType: responseType
            } || {
              responseType: responseType
            };
            requestUrl = url || this.url;
            if (!(!requestUrl || requestUrl === undefined)) {
              _context4.next = 2;
              break;
            }
            throw new Error('Asset URL can not be empty');
          case 2:
            return _context4.abrupt("return", http.get(requestUrl, headers));
          case 3:
            _context4.prev = 3;
            _t4 = _context4["catch"](1);
            throw error(_t4);
          case 4:
          case "end":
            return _context4.stop();
        }
      }, _callee4, this, [[1, 3]]);
    }));
    return function (_x5) {
      return _ref5.apply(this, arguments);
    };
  }();
  return this;
}
export function AssetCollection(http, data) {
  var obj = cloneDeep(data.assets) || [];
  var assetCollection = obj.map(function (userdata) {
    return new Asset(http, {
      asset: userdata,
      stackHeaders: data.stackHeaders
    });
  });
  return assetCollection;
}
export function createFormData(data) {
  return function () {
    var formData = new FormData();
    if (typeof data['parent_uid'] === 'string') {
      formData.append('asset[parent_uid]', data['parent_uid']);
    }
    if (typeof data.description === 'string') {
      formData.append('asset[description]', data.description);
    }
    if (data.tags instanceof Array) {
      formData.append('asset[tags]', data.tags.join(','));
    } else if (typeof data.tags === 'string') {
      formData.append('asset[tags]', data.tags);
    }
    if (typeof data.title === 'string') {
      formData.append('asset[title]', data.title);
    }
    // Handle Buffer Upload
    if (Buffer.isBuffer(data.upload)) {
      formData.append('asset[upload]', data.upload, {
        filename: data.filename || 'uploaded_file',
        contentType: data.content_type || 'application/octet-stream'
      });
    } else if (typeof data.upload === 'string') {
      // Handle File Path Upload
      var uploadStream = createReadStream(data.upload);
      if (typeof data.content_type === 'string') {
        formData.append('asset[upload]', uploadStream, {
          contentType: data.content_type
        });
      } else {
        formData.append('asset[upload]', uploadStream);
      }
    } else {
      throw new Error('Invalid upload format. Must be a file path or Buffer.');
    }
    return formData;
  };
}