"use strict";

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");
var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _defineProperty2 = require("@babel/runtime/helpers/defineProperty");
var _defineProperty3 = (0, _interopRequireDefault2["default"])(_defineProperty2);
var _asyncToGenerator2 = require("@babel/runtime/helpers/asyncToGenerator");
var _asyncToGenerator3 = (0, _interopRequireDefault2["default"])(_asyncToGenerator2);
exports.BranchAlias = BranchAlias;
var _regenerator = require("@babel/runtime/regenerator");
var _regenerator2 = (0, _interopRequireDefault2["default"])(_regenerator);
var _cloneDeep = require("lodash/cloneDeep");
var _cloneDeep2 = (0, _interopRequireDefault2["default"])(_cloneDeep);
var _contentstackError = require("../../core/contentstackError");
var _contentstackError2 = (0, _interopRequireDefault2["default"])(_contentstackError);
var _entity = require("../../entity");
var _branch = require("../branch");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty3["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 *
 * @namespace BranchAlias
 */
function BranchAlias(http) {
  var _this = this;
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  this.stackHeaders = data.stackHeaders;
  this.urlPath = "/stacks/branch_aliases";
  if (data.branch_alias) {
    Object.assign(this, (0, _cloneDeep2["default"])(data.branch_alias));
    this.urlPath = "/stacks/branch_aliases/".concat(this.uid);

    /**
     * @description The Update BranchAlias call lets you update the name of an existing BranchAlias.
     * @memberof BranchAlias
     * @func update
     * @returns {Promise<Branch.Branch>} Promise for Branch instance
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).branchAlias('branch_alias_id').createOrUpdate('branch_uid')
     * .then((branch) => {
     *  branch.name = 'new_branch_name'
     *  return branch.update()
     * })
     * .then((branch) => console.log(branch))
     *
     */
    this.createOrUpdate = /*#__PURE__*/function () {
      var _ref = (0, _asyncToGenerator3["default"])(/*#__PURE__*/_regenerator2["default"].mark(function _callee(targetBranch) {
        var response, _t;
        return _regenerator2["default"].wrap(function (_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 1;
              return http.put(_this.urlPath, {
                branch_alias: {
                  target_branch: targetBranch
                }
              }, {
                headers: _objectSpread({}, (0, _cloneDeep2["default"])(_this.stackHeaders))
              });
            case 1:
              response = _context.sent;
              if (!response.data) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return", new _branch.Branch(http, (0, _entity.parseData)(response, _this.stackHeaders)));
            case 2:
              throw (0, _contentstackError2["default"])(response);
            case 3:
              _context.next = 5;
              break;
            case 4:
              _context.prev = 4;
              _t = _context["catch"](0);
              throw (0, _contentstackError2["default"])(_t);
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 4]]);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
    /**
     * @description The Delete BranchAlias call is used to delete an existing BranchAlias permanently from your Stack.
     * @memberof BranchAlias
     * @func delete
     * @returns {Object} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).branchAlias('branch_alias_id').delete()
     * .then((response) => console.log(response.notice))
     */
    this["delete"] = (0, _entity.deleteEntity)(http, true);

    /**
     * @description The fetch BranchAlias call fetches BranchAlias details.
     * @memberof BranchAlias
     * @func fetch
     * @returns {Promise<Branch.Branch>} Promise for Branch instance
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).branchAlias('branch_alias_id').fetch()
     * .then((branch) => console.log(branch))
     *
     */
    this.fetch = /*#__PURE__*/(0, _asyncToGenerator3["default"])(/*#__PURE__*/_regenerator2["default"].mark(function _callee2() {
      var param,
        headers,
        response,
        _args2 = arguments,
        _t2;
      return _regenerator2["default"].wrap(function (_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            param = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
            _context2.prev = 1;
            headers = {
              headers: _objectSpread({}, (0, _cloneDeep2["default"])(this.stackHeaders)),
              params: _objectSpread({}, (0, _cloneDeep2["default"])(param))
            } || {};
            _context2.next = 2;
            return http.get(this.urlPath, headers);
          case 2:
            response = _context2.sent;
            if (!response.data) {
              _context2.next = 3;
              break;
            }
            return _context2.abrupt("return", new _branch.Branch(http, (0, _entity.parseData)(response, this.stackHeaders)));
          case 3:
            throw (0, _contentstackError2["default"])(response);
          case 4:
            _context2.next = 6;
            break;
          case 5:
            _context2.prev = 5;
            _t2 = _context2["catch"](1);
            throw (0, _contentstackError2["default"])(_t2);
          case 6:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this, [[1, 5]]);
    }));
  } else {
    /**
     * @description The Get all BranchAlias request retrieves the details of all the Branch of a stack.
     * @memberof BranchAlias
     * @func fetchAll
     * @param {Int} limit The limit parameter will return a specific number of Branch in the output.
     * @param {Int} skip The skip parameter will skip a specific number of Branch in the output.
     * @param {Boolean}include_count To retrieve the count of Branch.
     * @returns {ContentstackCollection} Result collection of content of specified module.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).branchAlias().fetchAll()
     * .then((collection) => console.log(collection))
     *
     */
    this.fetchAll = (0, _entity.fetchAll)(http, _branch.BranchCollection);
  }
  return this;
}