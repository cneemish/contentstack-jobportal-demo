import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import error from '../core/contentstackError';
import cloneDeep from 'lodash/cloneDeep';
import ContentstackCollection from '../contentstackCollection';
export default function Query(http, urlPath, param) {
  var stackHeaders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var wrapperCollection = arguments.length > 4 ? arguments[4] : undefined;
  var headers = {};
  if (stackHeaders) {
    headers.headers = stackHeaders;
  }
  var contentTypeUid = null;
  if (param) {
    if (param.content_type_uid) {
      contentTypeUid = param.content_type_uid;
      delete param.content_type_uid;
    }
    headers.params = _objectSpread({}, cloneDeep(param));
  }
  /**
   * @description This method will fetch content of query on specified module.
   * @returns {ContentstackCollection} Result collection of content of specified module.
   * @example All Stack
   * import * as contentstack from '@contentstack/management'
   * const client = contentstack.client()
   *
   * client.stack().query().find()
   * .then((collection) => console.log(collection))
   *
   * @example Query on stack
   * import * as contentstack from '@contentstack/management'
   * const client = contentstack.client()
   *
   * client.stack().query( { query: { name: 'Stack name' } }).find()
   * .then((collection) => console.log(collection))
   *
   */
  var find = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var response, _t;
      return _regeneratorRuntime.wrap(function (_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 1;
            return http.get(urlPath, headers);
          case 1:
            response = _context.sent;
            if (!response.data) {
              _context.next = 2;
              break;
            }
            if (contentTypeUid) {
              response.data.content_type_uid = contentTypeUid;
            }
            return _context.abrupt("return", new ContentstackCollection(response, http, stackHeaders, wrapperCollection));
          case 2:
            throw error(response);
          case 3:
            _context.next = 5;
            break;
          case 4:
            _context.prev = 4;
            _t = _context["catch"](0);
            throw error(_t);
          case 5:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 4]]);
    }));
    return function find() {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * @description This method will fetch count of content for query on specified module.
   * @returns {Object} Result is Object of content of specified module.
   * @example All Stack
   * import * as contentstack from '@contentstack/management'
   * const client = contentstack.client()
   *
   * client.stack().query().count()
   * .then((response) => console.log(response))
   *
   * @example Query on Asset
   * import * as contentstack from '@contentstack/management'
   * const client = contentstack.client()
   *
   * client.stack({ api_key: 'api_key'}).query({ query: { title: 'Stack name' } }).count()
   * .then((response) => console.log(response))
   *
   */
  var count = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var response, _t2;
      return _regeneratorRuntime.wrap(function (_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            headers.params = _objectSpread(_objectSpread({}, headers.params), {}, {
              count: true
            });
            _context2.prev = 1;
            _context2.next = 2;
            return http.get(urlPath, headers);
          case 2:
            response = _context2.sent;
            if (!response.data) {
              _context2.next = 3;
              break;
            }
            return _context2.abrupt("return", response.data);
          case 3:
            throw error(response);
          case 4:
            _context2.next = 6;
            break;
          case 5:
            _context2.prev = 5;
            _t2 = _context2["catch"](1);
            throw error(_t2);
          case 6:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[1, 5]]);
    }));
    return function count() {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * @description This method will fetch content of query on specified module.
   * @returns {ContentstackCollection} Result content of specified module.
   * @example Stack
   * import * as contentstack from '@contentstack/management'
   * const client = contentstack.client()
   *
   * client.stack().query().findOne()
   * .then((collection) => console.log(collection))
   *
   * @example Query on stack
   * import * as contentstack from '@contentstack/management'
   * const client = contentstack.client()
   *
   * client.stack().query({ query: { title: 'Stack name' } }).findOne()
   * .then((collection) => console.log(collection))
   *
   */
  var findOne = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      var limitHeader, response, _t3;
      return _regeneratorRuntime.wrap(function (_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            limitHeader = headers;
            limitHeader.params.limit = 1;
            _context3.prev = 1;
            _context3.next = 2;
            return http.get(urlPath, limitHeader);
          case 2:
            response = _context3.sent;
            if (!response.data) {
              _context3.next = 3;
              break;
            }
            if (contentTypeUid) {
              response.data.content_type_uid = contentTypeUid;
            }
            return _context3.abrupt("return", new ContentstackCollection(response, http, stackHeaders, wrapperCollection));
          case 3:
            throw error(response);
          case 4:
            _context3.next = 6;
            break;
          case 5:
            _context3.prev = 5;
            _t3 = _context3["catch"](1);
            throw error(_t3);
          case 6:
          case "end":
            return _context3.stop();
        }
      }, _callee3, null, [[1, 5]]);
    }));
    return function findOne() {
      return _ref3.apply(this, arguments);
    };
  }();
  return {
    count: count,
    find: find,
    findOne: findOne
  };
}