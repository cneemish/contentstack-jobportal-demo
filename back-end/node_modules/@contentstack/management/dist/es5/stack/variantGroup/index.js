"use strict";

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");
var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _defineProperty2 = require("@babel/runtime/helpers/defineProperty");
var _defineProperty3 = (0, _interopRequireDefault2["default"])(_defineProperty2);
var _asyncToGenerator2 = require("@babel/runtime/helpers/asyncToGenerator");
var _asyncToGenerator3 = (0, _interopRequireDefault2["default"])(_asyncToGenerator2);
exports.VariantGroup = VariantGroup;
exports.VariantGroupCollection = VariantGroupCollection;
var _regenerator = require("@babel/runtime/regenerator");
var _regenerator2 = (0, _interopRequireDefault2["default"])(_regenerator);
var _cloneDeep = require("lodash/cloneDeep");
var _cloneDeep2 = (0, _interopRequireDefault2["default"])(_cloneDeep);
var _entity = require("../../entity");
var _index = require("./variants/index");
var _contentstackError = require("../../core/contentstackError");
var _contentstackError2 = (0, _interopRequireDefault2["default"])(_contentstackError);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty3["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Contentstack has a sophisticated multilingual capability. It allows you to create and publish entries in any language. This feature allows you to set up multilingual websites and cater to a wide variety of audience by serving content in their local language(s). Read more about <a href='https://www.contentstack.com/docs/developers/multi-language-content'>VariantGroups</a>.
 * @namespace VariantGroup
 */

function VariantGroup(http) {
  var _this = this;
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  this.stackHeaders = data.stackHeaders;
  this.urlPath = "/variant_groups";
  if (data.variant_group) {
    Object.assign(this, (0, _cloneDeep2["default"])(data.variant_group));
    this.urlPath += "/".concat(this.uid);
    /**
       * @description The Update VariantGroup call lets you update the name and description of an existing VariantGroup.
       * @memberof VariantGroup
       * @func update
       * @returns {Promise<VariantGroup.VariantGroup>} Promise for VariantGroup instance
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client()
       * const up_data = {name: 'update name'}
       * client.stack({ api_key: 'api_key'}).VariantGroup('variant_group_uid').update(up_data)
       * .then((variant_group) => console.log(variant_group))
       *
       */
    this.update = /*#__PURE__*/function () {
      var _ref = (0, _asyncToGenerator3["default"])(/*#__PURE__*/_regenerator2["default"].mark(function _callee(data) {
        var response, _t;
        return _regenerator2["default"].wrap(function (_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 1;
              return http.put(_this.urlPath, data, {
                headers: _objectSpread({}, (0, _cloneDeep2["default"])(_this.stackHeaders))
              });
            case 1:
              response = _context.sent;
              if (!response.data) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return", response.data);
            case 2:
              return _context.abrupt("return", (0, _contentstackError2["default"])(response));
            case 3:
              _context.next = 5;
              break;
            case 4:
              _context.prev = 4;
              _t = _context["catch"](0);
              return _context.abrupt("return", (0, _contentstackError2["default"])(_t));
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 4]]);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
    /**
       * @description The Delete VariantGroup call is used to delete an existing VariantGroup permanently from your Stack.
       * @memberof VariantGroup
       * @func delete
       * @returns {Object} Response Object.
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client()
       *
       * client.stack({ api_key: 'api_key'}).VariantGroup('variant_group_uid').delete()
       * .then((response) => console.log(response.notice))
       */
    this["delete"] = (0, _entity.deleteEntity)(http);

    /**
     * @description Content type defines the structure or schema of a page or a section of your web or mobile property.
     * @param {String} uid The UID of the ContentType you want to get details.
     * @returns {ContenType} Instace of ContentType.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).VariantGroup('variant_group_uid').variants('variant_uid').fetch()
     * .then((Variants) => console.log(Variants))
     */
    this.variants = function () {
      var uid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var data = {
        stackHeaders: _this.stackHeaders
      };
      data.variant_group_uid = _this.uid;
      if (uid) {
        data.variants = {
          uid: uid
        };
      }
      return new _index.Variants(http, data);
    };
  } else {
    /**
     * @description The Create a variant group call creates a new variant group in a particular stack of your Contentstack account.
     * @memberof VariantGroup
     * @func create
     * @returns {Promise<VariantGroup.VariantGroup>} Promise for VariantGroup instance
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     * const variant_group = {
     *      "name": "Colors",
     *        "content_types": [
     *          "iphone_product_page"
     *        ],
     *        "uid": "iphone_color_white", // optional
     *      }
     * client.stack().VariantGroup().create({ variant_group } )
     * .then((variant_group) => console.log(variant_group))
     */
    this.create = /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator3["default"])(/*#__PURE__*/_regenerator2["default"].mark(function _callee2(data) {
        var response, _t2;
        return _regenerator2["default"].wrap(function (_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 1;
              return http.post("".concat(_this.urlPath), data, {
                headers: _objectSpread({}, (0, _cloneDeep2["default"])(_this.stackHeaders))
              });
            case 1:
              response = _context2.sent;
              if (!response.data) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", response.data);
            case 2:
              return _context2.abrupt("return", (0, _contentstackError2["default"])(response));
            case 3:
              _context2.next = 5;
              break;
            case 4:
              _context2.prev = 4;
              _t2 = _context2["catch"](0);
              return _context2.abrupt("return", (0, _contentstackError2["default"])(_t2));
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[0, 4]]);
      }));
      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }();

    /**
     * @description The Query on Variant Groups will allow to fetch details of all or specific Variant Groups
     * @memberof VariantGroup
     * @func query
     * @param {Boolean} include_count Set this to 'true' to include in response the total count of content types available in your stack.
     * @returns {Array<VariantGroup>} Array of ContentTyoe.
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack(api_key).VariantGroup().query({ query: { code: 'variant_group-code' } }).find()
     * .then((variant_groups) => console.log(variant_groups))
     */
    this.query = (0, _entity.query)({
      http: http,
      wrapperCollection: VariantGroupCollection
    });
  }
  return this;
}
function VariantGroupCollection(http, data) {
  var obj = (0, _cloneDeep2["default"])(data.variant_groups) || [];
  var variantGroupCollection = obj.map(function (userdata) {
    return new VariantGroup(http, {
      variant_group: userdata,
      stackHeaders: data.stackHeaders
    });
  });
  return variantGroupCollection;
}