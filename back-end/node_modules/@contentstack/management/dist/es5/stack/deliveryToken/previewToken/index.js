"use strict";

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");
var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewToken = PreviewToken;
exports.PreviewTokenCollection = PreviewTokenCollection;
var _cloneDeep = require("lodash/cloneDeep");
var _cloneDeep2 = (0, _interopRequireDefault2["default"])(_cloneDeep);
var _entity = require("../../../entity");
/**
 * Preview tokens provide read-only access to the associated environments. Read more about <a href='https://www.contentstack.com/docs/developers/create-tokens/about-preview-tokens'>PreviewToken</a>.
 * @namespace PreviewToken
 */
function PreviewToken(http) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  this.stackHeaders = data.stackHeaders;
  if (data.token) {
    Object.assign(this, (0, _cloneDeep2["default"])(data.token));
    this.urlPath = "/stacks/delivery_tokens/".concat(this.uid, "/preview_token");

    /**
     * @description The Delete PreviewToken call is used to delete an existing PreviewToken permanently from your Stack.
     * @memberof PreviewToken
     * @func delete
     * @returns {Object} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).deliveryToken('delivery_token_uid').previewToken().delete()
     * .then((response) => console.log(response.notice))
     */
    this["delete"] = (0, _entity.deleteEntity)(http);

    /**
     * @description The Create a PreviewToken call creates a new previewToken in a particular stack of your Contentstack account.
     * @memberof PreviewToken
     * @func create
     * @returns {Promise<PreviewToken.PreviewToken>} Promise for PreviewToken instance
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     * client.stack().deliveryToken('delivery_token_uid').previewToken().create()
     * .then((previewToken) => console.log(previewToken))
     */
    this.create = (0, _entity.create)({
      http: http
    });
  }
}
function PreviewTokenCollection(http, data) {
  var obj = (0, _cloneDeep2["default"])(data.tokens) || [];
  var previewTokenCollection = obj.map(function (userdata) {
    return new PreviewToken(http, {
      token: userdata,
      stackHeaders: data.stackHeaders
    });
  });
  return previewTokenCollection;
}