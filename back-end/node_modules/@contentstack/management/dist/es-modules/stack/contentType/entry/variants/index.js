import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import cloneDeep from 'lodash/cloneDeep';
import { deleteEntity, fetch, query } from '../../../../entity';
import error from '../../../../core/contentstackError';
/**
 * An variants is the actual piece of content created using one of the defined content types. Read more about <a href='https://www.contentstack.com/docs/guide/content-management'>Entries</a>.
 * @namespace Variants
 */
export function Variants(http, data) {
  var _this = this;
  Object.assign(this, cloneDeep(data));
  this.urlPath = "/content_types/".concat(this.content_type_uid, "/entries/").concat(this.entry_uid, "/variants");
  if (data && data.variants_uid) {
    this.urlPath += "/".concat(this.variants_uid);
    /**
         * @description The Create an variants call creates a new variants for the selected content type.
         * @memberof Variants
         * @func update
         * @returns {Promise<Variants.Variants>} Promise for Variants instance
         * @example
         * import * as contentstack from '@contentstack/management'
         * const client = contentstack.client()
         * const data = {
         *      "entry": {
         *          "title": "example",
         *          "url": "/example",
         *          "_variant": {
         *          "_change_set": [
         *              "title",
         *              "url"
         *              ]
         *          }
         *          }
         *      }
         * client.stack({ api_key: 'api_key'}).contentType('content_type_uid').entry('entry_uid').variants('uid').update(data)
         * .then((variants) => console.log(variants))
         */
    this.update = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
        var response, _t;
        return _regeneratorRuntime.wrap(function (_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 1;
              return http.put(_this.urlPath, data, {
                headers: _objectSpread({}, cloneDeep(_this.stackHeaders))
              });
            case 1:
              response = _context.sent;
              if (!response.data) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return", response.data);
            case 2:
              return _context.abrupt("return", error(response));
            case 3:
              _context.next = 5;
              break;
            case 4:
              _context.prev = 4;
              _t = _context["catch"](0);
              return _context.abrupt("return", error(_t));
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 4]]);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    /**
         * @description The Delete an variants call is used to delete a specific variants from a content type.
         * @memberof Variants
         * @func delete
         * @returns {Object} Response Object.
         * @example
         * import * as contentstack from '@contentstack/management'
         * const client = contentstack.client()
         *
         * client.stack({ api_key: 'api_key'}).contentType('content_type_uid').entry('entry_uid').variants('uid').delete()
         * .then((response) => console.log(response.notice))
         */
    this["delete"] = deleteEntity(http);

    /**
         * @description The fetch Variants call fetches Variants details.
         * @memberof Variants
         * @func fetch
         * @returns {Promise<Variants.Variants>} Promise for Variants instance
         * @example
         * import * as contentstack from '@contentstack/management'
         * const client = contentstack.client()
         *
         * client.stack({ api_key: 'api_key'}).contentType('content_type_uid').entry('entry_uid').variants('uid').fetch()
         * .then((variants) => console.log(variants))
         *
         */
    this.fetch = fetch(http, 'variants');

    /**
         * @description The version Variants call fetches Variants version details.
         * @memberof Variants
         * @func versions
         * @returns {Promise<Variants.Variants>} Promise for Variants instance
         * @example
         * import * as contentstack from '@contentstack/management'
         * const client = contentstack.client()
         *
         * client.stack({ api_key: 'api_key'}).contentType('content_type_uid').entry('entry_uid').variants('uid').versions()
         * .then((variants) => console.log(variants))
         *
         */
    this.versions = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var response, _t2;
      return _regeneratorRuntime.wrap(function (_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 1;
            return http.get("".concat(_this.urlPath, "/versions"), {
              headers: _objectSpread({}, cloneDeep(_this.stackHeaders))
            });
          case 1:
            response = _context2.sent;
            if (!response.data) {
              _context2.next = 2;
              break;
            }
            return _context2.abrupt("return", response.data);
          case 2:
            return _context2.abrupt("return", error(response));
          case 3:
            _context2.next = 5;
            break;
          case 4:
            _context2.prev = 4;
            _t2 = _context2["catch"](0);
            return _context2.abrupt("return", error(_t2));
          case 5:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[0, 4]]);
    }));
  } else {
    /**
         * @description The Query on Variants will allow to fetch details of all or specific Variants
         * @memberof Variants
         * @func query
         * @param {Int} locale Enter the code of the language of which the entries need to be included. Only the entries published in this locale will be displayed.
         * @param {Object} query Queries that you can use to fetch filtered results.
         * @returns {Array<Variants>} Array of Variants.
         *
         * @example
         * import * as contentstack from '@contentstack/management'
         * const client = contentstack.client()
         *
         * client.stack().contentType('content_type_uid').entry('entry_uid').variants().query({ query: { title: 'Variants title' } }).find()
         * .then((entries) => console.log(entries))
         */
    this.query = query({
      http: http,
      wrapperCollection: VariantsCollection
    });
  }
}
export function VariantsCollection(http, data) {
  var obj = cloneDeep(data.entries) || [];
  var variantCollection = obj.map(function (variant) {
    return new Variants(http, {
      content_type_uid: data.content_type_uid,
      entry_uid: variant.uid,
      variants_uid: variant._variant._uid,
      stackHeaders: data.stackHeaders,
      variants: variant
    });
  });
  return variantCollection;
}