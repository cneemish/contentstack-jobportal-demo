import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import cloneDeep from 'lodash/cloneDeep';
import { create, fetch, deleteEntity, fetchAll } from '../../entity';
import { TeamUsers } from './teamUsers';
import { StackRoleMappings } from './stackRoleMappings';
import error from '../../core/contentstackError';
export function Teams(http, data) {
  var _this = this;
  this.organizationUid = data.organizationUid;
  this.urlPath = "/organizations/".concat(this.organizationUid, "/teams");
  if (data && data.uid) {
    Object.assign(this, cloneDeep(data));
    this.urlPath = "/organizations/".concat(this.organizationUid, "/teams/").concat(this.uid);

    /**
     * @description The update call on team will allow to update details of team.
     * @memberof Teams
     * @func update
     * @returns {Promise<Teams.Teams>} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     * const updateData = {
     *    name: 'updatedname',
     *    users: [
     *      {
     *          email: 'abc@abc.com'
     *      }
     *    ],
     *    organizationRole: 'blt09e5dfced326aaea',
     *    stackRoleMapping: []
     *   }
     * client.organization(s'organizationUid').teams('teamUid').update(updateData)
     * .then((response) => console.log(response))
     *
     */
    this.update = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(updateData) {
        var response, _t;
        return _regeneratorRuntime.wrap(function (_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 1;
              return http.put(_this.urlPath, updateData);
            case 1:
              response = _context.sent;
              if (!response.data) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return", response.data);
            case 2:
              _context.next = 4;
              break;
            case 3:
              _context.prev = 3;
              _t = _context["catch"](0);
              throw error(_t);
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 3]]);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    /**
     * @description The delete call on team will delete the existing team.
     * @memberof Teams
     * @func delete
     * @returns {Promise<Teams.Teams>} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     * client.organization('organizationUid').teams('teamUid').delete()
     * .then((response) => console.log(response))
     *
     */
    this["delete"] = deleteEntity(http);

    /**
     * @description The fetch call on team will delete the existing team.
     * @memberof Teams
     * @func fetch
     * @returns {Promise<Teams.Teams>} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     * client.organization('organizationUid').teams('teamUid').fetch()
     * .then((response) => console.log(response))
     *
     */
    this.fetch = fetch(http, 'team');

    /**
     * @description The users call on team will get users details.
     * @memberof Teams
     * @func users
     * @returns {Promise<Teams.Teams>} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     * client.organization('organizationUid').teams('teamUid').teamUsers().fetchAll()
     *  .then((response) => console.log(response))
     *
     */
    this.teamUsers = function () {
      var userId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      data.organizationUid = _this.organizationUid;
      data.teamUid = _this.uid;
      if (userId) {
        data.userId = userId;
      }
      return new TeamUsers(http, data);
    };

    /**
     * @description The stackRoleMappings call on team will get the stack role Mapping.
     * @memberof Teams
     * @func users
     * @returns {Promise<Teams.Teams>} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     * client.organization('organizationUid').teams('teamUid').stackRoleMappings().fetchAll()
     *  .then((response) => console.log(response))
     *
     */
    this.stackRoleMappings = function () {
      var stackApiKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      data.organizationUid = _this.organizationUid;
      data.teamUid = _this.uid;
      if (stackApiKey) {
        data.stackApiKey = stackApiKey;
      }
      return new StackRoleMappings(http, data);
    };
  } else {
    /**
     * @description The fetch call on team will delete the existing team.
     * @memberof Teams
     * @func create
     * @returns {Promise<Teams.Teams>} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     * const team = {
     *    name: 'name',
     *    organizationUid: 'organization_uid',
     *    users: [],
     *    stackRoleMapping: [],
     *    organizationRole: 'organizationRole'
     * }
     * client.organization('organizationUid').teams().create(team)
     * .then((response) => console.log(response))
     *
     */
    this.create = create({
      http: http
    });

    /**
     * @description The fetchAll on team will allow to fetch details of all teams.
     * @memberof Teams
     * @func fetchAll
     * @returns {Promise<Teams.Teams>} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.organization('organizationUid').teams().fetchAll()
     * .then((response) => console.log(response))
     */
    this.fetchAll = fetchAll(http, TeamsCollection, {
      api_version: 1.1
    });
  }
}
export function TeamsCollection(http, teamsData) {
  var obj = cloneDeep(teamsData.teams) || [];
  var teamsCollection = obj.map(function (team) {
    return new Teams(http, team);
  });
  return teamsCollection;
}