"use strict";

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");
var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _defineProperty2 = require("@babel/runtime/helpers/defineProperty");
var _defineProperty3 = (0, _interopRequireDefault2["default"])(_defineProperty2);
var _asyncToGenerator2 = require("@babel/runtime/helpers/asyncToGenerator");
var _asyncToGenerator3 = (0, _interopRequireDefault2["default"])(_asyncToGenerator2);
exports.Variants = Variants;
exports.VariantsCollection = VariantsCollection;
var _regenerator = require("@babel/runtime/regenerator");
var _regenerator2 = (0, _interopRequireDefault2["default"])(_regenerator);
var _cloneDeep = require("lodash/cloneDeep");
var _cloneDeep2 = (0, _interopRequireDefault2["default"])(_cloneDeep);
var _entity = require("../../entity");
var _contentstackError = require("../../core/contentstackError");
var _contentstackError2 = (0, _interopRequireDefault2["default"])(_contentstackError);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty3["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Variantss allow you to group a collection of content within a stack. Using variants you can group content types that need to work together. Read more about <a href='https://www.contentstack.com/docs/developers/create-content-types/manage-variants'>Variantss</a>.
 * @namespace Variants
 */
function Variants(http, data) {
  var _this = this;
  this.stackHeaders = data.stackHeaders;
  this.urlPath = "/variants";
  if (data.variants) {
    Object.assign(this, (0, _cloneDeep2["default"])(data.variants));
    this.urlPath += "/".concat(this.uid);

    /**
     * @description The Delete variants call is used to delete a specific variants.
     * @memberof Variants
     * @func delete
     * @returns {Object} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).variants('variants_uid').delete()
     * .then((response) => console.log(response.notice))
     */
    this["delete"] = (0, _entity.deleteEntity)(http);

    /**
     * @description The fetch Variants returns information about a particular variants of a stack.
     * @memberof Variants
     * @func fetch
     * @returns {Promise<Variants.Variants>} Promise for Variants instance
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).variants('variants_uid').fetch()
     * .then((variants) => console.log(variants))
     *
     */
    this.fetch = /*#__PURE__*/(0, _asyncToGenerator3["default"])(/*#__PURE__*/_regenerator2["default"].mark(function _callee() {
      var param,
        headers,
        response,
        _args = arguments,
        _t;
      return _regenerator2["default"].wrap(function (_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            param = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
            _context.prev = 1;
            headers = {
              headers: _objectSpread({}, (0, _cloneDeep2["default"])(_this.stackHeaders)),
              params: _objectSpread({}, (0, _cloneDeep2["default"])(param))
            } || {};
            _context.next = 2;
            return http.get(_this.urlPath, headers);
          case 2:
            response = _context.sent;
            if (!response.data) {
              _context.next = 3;
              break;
            }
            return _context.abrupt("return", response.data);
          case 3:
            throw (0, _contentstackError2["default"])(response);
          case 4:
            _context.next = 6;
            break;
          case 5:
            _context.prev = 5;
            _t = _context["catch"](1);
            (0, _contentstackError2["default"])(_t);
          case 6:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[1, 5]]);
    }));
  } else {
    /**
     * @description The Create an variants call creates a new variants.
     * @memberof Variants
     * @func create
     * @returns {Promise<Variants.Variants>} Promise for Variants instance
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     * const variants = {
     *       "uid": "iphone_color_white", // optional
     *       "name": "White",
     *       "personalize_metadata": {
     *           "experience_uid": "exp1",
     *           "experience_short_uid": "expShortUid1",
     *           "project_uid": "project_uid1",
     *           "variant_short_uid": "variantShort_uid1"
     *       },
     *       }
     * client.stack().variants().create({ variants })
     * .then((variants) => console.log(variants))
     */
    this.create = /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator3["default"])(/*#__PURE__*/_regenerator2["default"].mark(function _callee2(data) {
        var response, _t2;
        return _regenerator2["default"].wrap(function (_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 1;
              return http.post("".concat(_this.urlPath), data, {
                headers: _objectSpread({}, (0, _cloneDeep2["default"])(_this.stackHeaders))
              });
            case 1:
              response = _context2.sent;
              if (!response.data) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", response.data);
            case 2:
              return _context2.abrupt("return", (0, _contentstackError2["default"])(response));
            case 3:
              _context2.next = 5;
              break;
            case 4:
              _context2.prev = 4;
              _t2 = _context2["catch"](0);
              return _context2.abrupt("return", (0, _contentstackError2["default"])(_t2));
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[0, 4]]);
      }));
      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();

    /**
     * @description The Query on Variants will allow to fetch details of all or specific Variants.
     * @memberof Variants
     * @param {Object} params - URI parameters
     * @prop {Object} params.query - Queries that you can use to fetch filtered results.
     * @func query
     * @returns {Array<Variants>} Array of Variants.
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack().variants().query({ query: { name: 'Variants Name' } }).find()
     * .then((variants) => console.log(variants))
     */
    this.query = (0, _entity.query)({
      http: http,
      wrapperCollection: VariantsCollection
    });

    /**
     * @description The fetchByUIDs on Variants will allow to fetch details of specific Variants UID.
     * @memberof Variants
     * @param {Object} params - URI parameters
     * @prop {Object} params.query - fetchByUIDs that you can use to fetch filtered results.
     * @func query
     * @returns {Array<Variants>} Array of Variants.
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
      * client.stack().variants().fetchByUIDs(['uid1','uid2']).find()
      * .then((variants) => console.log(variants))
     */
    this.fetchByUIDs = /*#__PURE__*/function () {
      var _ref3 = (0, _asyncToGenerator3["default"])(/*#__PURE__*/_regenerator2["default"].mark(function _callee3(variantUids) {
        var response, _t3;
        return _regenerator2["default"].wrap(function (_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              _context3.next = 1;
              return http.get(_this.urlPath, {
                params: {
                  uids: variantUids
                },
                headers: _objectSpread({}, (0, _cloneDeep2["default"])(_this.stackHeaders))
              });
            case 1:
              response = _context3.sent;
              if (!response.data) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", response.data);
            case 2:
              throw (0, _contentstackError2["default"])(response);
            case 3:
              _context3.next = 5;
              break;
            case 4:
              _context3.prev = 4;
              _t3 = _context3["catch"](0);
              throw (0, _contentstackError2["default"])(_t3);
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, null, [[0, 4]]);
      }));
      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }();
  }
}
function VariantsCollection(http, data) {
  var obj = (0, _cloneDeep2["default"])(data.variants) || [];
  var VariantsCollection = obj.map(function (userdata) {
    return new Variants(http, {
      variants: userdata,
      stackHeaders: data.stackHeaders
    });
  });
  return VariantsCollection;
}