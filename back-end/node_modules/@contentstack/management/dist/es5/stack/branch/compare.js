"use strict";

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");
var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _asyncToGenerator2 = require("@babel/runtime/helpers/asyncToGenerator");
var _asyncToGenerator3 = (0, _interopRequireDefault2["default"])(_asyncToGenerator2);
exports.Compare = Compare;
var _regenerator = require("@babel/runtime/regenerator");
var _regenerator2 = (0, _interopRequireDefault2["default"])(_regenerator);
var _entity = require("../../entity");
/**
 *
 * @namespace Branch
 */
function Compare(http) {
  var _this = this;
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  this.stackHeaders = data.stackHeaders;
  this.urlPath = "/stacks/branches_compare";

  /**
     * @description List of content types and global fields that exist in only one branch or are different between the two branches.
     * @memberof Compare
     * @func all
     * @returns {Promise<Response>} Promise for response.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).branch('branch_uid').compare('compare_branch_uid').all({skip: 0, limit: 100})
     * .then(response)
     * .catch(error)
     *
   */
  this.all = /*#__PURE__*/(0, _asyncToGenerator3["default"])(/*#__PURE__*/_regenerator2["default"].mark(function _callee() {
    var params,
      _args = arguments;
    return _regenerator2["default"].wrap(function (_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          params = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          return _context.abrupt("return", (0, _entity.get)(http, _this.urlPath, params, data));
        case 1:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));

  /**
     * @description List of all or specific content types that exist in only one branch or are different between the two branches.
     * @memberof Compare
     * @func contentTypes
     * @param {string} params.uid Optional uid for Content Type to compare.
     * @returns {Promise<Response>} Promise for response.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).branch('branch_uid').compare().all({skip: 0, limit: 100})
     * .then(response)
     * .catch(error)
     *
   */
  this.contentTypes = /*#__PURE__*/(0, _asyncToGenerator3["default"])(/*#__PURE__*/_regenerator2["default"].mark(function _callee2() {
    var params,
      url,
      _args2 = arguments;
    return _regenerator2["default"].wrap(function (_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          params = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
          url = "".concat(_this.urlPath, "/content_types");
          if (params.uid) {
            url = "".concat(url, "/").concat(params.uid);
            delete params.uid;
          }
          return _context2.abrupt("return", (0, _entity.get)(http, url, params, data));
        case 1:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));

  /**
     * @description Compare allows you compare any or specific ContentType or GlobalFields.
     * @memberof Compare
     * @func globalFields
     * @param {string} params.uid Optional uid for Global Field to compare.
     * @returns {Promise<Response>} Promise for response.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).branch('branch_uid').compare().all({skip: 0, limit: 100})
     * .then(response)
     * .catch(error)
     *
   */
  this.globalFields = /*#__PURE__*/(0, _asyncToGenerator3["default"])(/*#__PURE__*/_regenerator2["default"].mark(function _callee3() {
    var params,
      url,
      _args3 = arguments;
    return _regenerator2["default"].wrap(function (_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          params = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
          url = "".concat(_this.urlPath, "/global_fields");
          if (params.uid) {
            url = "".concat(url, "/").concat(params.uid);
            delete params.uid;
          }
          return _context3.abrupt("return", (0, _entity.get)(http, url, params, data));
        case 1:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return this;
}