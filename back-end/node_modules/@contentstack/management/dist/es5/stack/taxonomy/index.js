"use strict";

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");
var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _defineProperty2 = require("@babel/runtime/helpers/defineProperty");
var _defineProperty3 = (0, _interopRequireDefault2["default"])(_defineProperty2);
var _asyncToGenerator2 = require("@babel/runtime/helpers/asyncToGenerator");
var _asyncToGenerator3 = (0, _interopRequireDefault2["default"])(_asyncToGenerator2);
exports.Taxonomy = Taxonomy;
exports.TaxonomyCollection = TaxonomyCollection;
exports.createFormData = createFormData;
var _regenerator = require("@babel/runtime/regenerator");
var _regenerator2 = (0, _interopRequireDefault2["default"])(_regenerator);
var _cloneDeep = require("lodash/cloneDeep");
var _cloneDeep2 = (0, _interopRequireDefault2["default"])(_cloneDeep);
var _entity = require("../../entity");
var _terms = require("./terms");
var _formData = require("form-data");
var _formData2 = (0, _interopRequireDefault2["default"])(_formData);
var _fs = require("fs");
var _contentstackError = require("../../core/contentstackError");
var _contentstackError2 = (0, _interopRequireDefault2["default"])(_contentstackError);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty3["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /* eslint-disable camelcase */
function Taxonomy(http) {
  var _this = this;
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  this.stackHeaders = data.stackHeaders;
  this.urlPath = "/taxonomies";
  if (data.taxonomy) {
    Object.assign(this, (0, _cloneDeep2["default"])(data.taxonomy));
    if (data.taxonomy.terms) {
      this.terms = new _terms.TermsCollection(http, {
        terms: data.taxonomy.terms,
        stackHeaders: data.stackHeaders
      }, this.uid);
    }
    this.urlPath = "/taxonomies/".concat(this.uid);

    /**
     * @description The Update taxonomy call is used to update an existing taxonomy.
     * @memberof Taxonomy
     * @func update
     * @returns {Promise<Taxonomy.Taxonomy>} Promise for Taxonomy instance
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).taxonomy('taxonomyUid').fetch()
     * .then((taxonomy) => {
     *    taxonomy.name = 'taxonomy name'
     *    return taxonomy.update()
     * })
     * .then((taxonomy) => console.log(taxonomy))
     *
     */
    this.update = (0, _entity.update)(http, 'taxonomy');

    /**
     * @description The Delete taxonomy call is used to delete an existing taxonomy.
     * @memberof Taxonomy
     * @func delete
     * @returns {Promise<Taxonomy.Taxonomy>} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).taxonomy('taxonomyUid').delete()
     * .then((response) => console.log(response.notice))
     *
     */
    this["delete"] = (0, _entity.deleteEntity)(http);

    /**
     * @description The Fetch taxonomy call is used to fetch an existing taxonomy.
     * @memberof Taxonomy
     * @func fetch
     * @returns {Promise<Taxonomy.Taxonomy>} Promise for Taxonomy instance
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).taxonomy('taxonomyUid').fetch()
     * .then((taxonomy) => console.log(taxonomy))
     *
     */
    this.fetch = (0, _entity.fetch)(http, 'taxonomy');

    /**
     * @description The Export taxonomy call is used to export an existing taxonomy.
     * @memberof Taxonomy
     * @func export
     * @returns {Promise<Taxonomy.Taxonomy>} Promise for Taxonomy instance
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).taxonomy('taxonomyUid').export()
     * .then((taxonomy) => console.log(taxonomy))
     *
     */
    this["export"] = /*#__PURE__*/(0, _asyncToGenerator3["default"])(/*#__PURE__*/_regenerator2["default"].mark(function _callee() {
      var params,
        headers,
        response,
        _args = arguments,
        _t;
      return _regenerator2["default"].wrap(function (_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            params = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
            _context.prev = 1;
            headers = {
              headers: _objectSpread({}, (0, _cloneDeep2["default"])(_this.stackHeaders)),
              params: params
            };
            _context.next = 2;
            return http.get("".concat(_this.urlPath, "/export"), headers);
          case 2:
            response = _context.sent;
            if (!response.data) {
              _context.next = 3;
              break;
            }
            return _context.abrupt("return", response.data);
          case 3:
            throw (0, _contentstackError2["default"])(response);
          case 4:
            _context.next = 6;
            break;
          case 5:
            _context.prev = 5;
            _t = _context["catch"](1);
            throw (0, _contentstackError2["default"])(_t);
          case 6:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[1, 5]]);
    }));
    this.terms = function () {
      var uid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var data = {
        stackHeaders: _this.stackHeaders
      };
      data.taxonomy_uid = _this.uid;
      if (uid) {
        data.term = {
          uid: uid
        };
      }
      return new _terms.Terms(http, data);
    };
  } else {
    /**
     * @description The Create taxonomy call is used to create a taxonomy.
     * @memberof Taxonomy
     * @func create
     * @returns {Promise<Taxonomy.Taxonomy>} Promise for Taxonomy instance
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     * const taxonomy = {
     *    uid: 'taxonomy_testing1',
     *    name: 'taxonomy testing',
     *    description: 'Description for Taxonomy testing'
     * }
     * client.stack({ api_key: 'api_key'}).taxonomy().create({taxonomy})
     * .then(taxonomy) => console.log(taxonomy)
     *
     */
    this.create = (0, _entity.create)({
      http: http
    });

    /**
     * @description The Query on Taxonomy will allow to fetch details of all Taxonomies.
     * @memberof Taxonomy
     * @param {Object} params - URI parameters
     * @prop {Object} params.query - Queries that you can use to fetch filtered results.
     * @func query
     * @returns {Array<Taxonomy>} Array of Taxonomy.
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack().taxonomy().query().find()
     * .then((taxonomies) => console.log(taxonomies)
     */
    this.query = (0, _entity.query)({
      http: http,
      wrapperCollection: TaxonomyCollection
    });

    /**
     * @description The 'Import taxonomy' import a single entry by uploading JSON or CSV files.
     * @memberof Taxonomy
     * @func import
     * @param {String} data.taxonomy path to file
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * const data = {
     *  taxonomy: 'path/to/file.json',
     * }
     * // Import a Taxonomy
     * client.stack({ api_key: 'api_key'}).taxonomy().import(data)
     * .then((taxonomy) => console.log(taxonomy))
     */
    this["import"] = /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator3["default"])(/*#__PURE__*/_regenerator2["default"].mark(function _callee2(data) {
        var params,
          response,
          _args2 = arguments,
          _t2;
        return _regenerator2["default"].wrap(function (_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              params = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
              _context2.prev = 1;
              _context2.next = 2;
              return (0, _entity.upload)({
                http: http,
                urlPath: "".concat(this.urlPath, "/import"),
                stackHeaders: this.stackHeaders,
                formData: createFormData(data),
                params: params
              });
            case 2:
              response = _context2.sent;
              if (!response.data) {
                _context2.next = 3;
                break;
              }
              return _context2.abrupt("return", new this.constructor(http, (0, _entity.parseData)(response, this.stackHeaders)));
            case 3:
              throw (0, _contentstackError2["default"])(response);
            case 4:
              _context2.next = 6;
              break;
            case 5:
              _context2.prev = 5;
              _t2 = _context2["catch"](1);
              throw (0, _contentstackError2["default"])(_t2);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[1, 5]]);
      }));
      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();
  }
}
function TaxonomyCollection(http, data) {
  var obj = (0, _cloneDeep2["default"])(data.taxonomies) || [];
  var taxonomyCollection = obj.map(function (userdata) {
    return new Taxonomy(http, {
      taxonomy: userdata,
      stackHeaders: data.stackHeaders
    });
  });
  return taxonomyCollection;
}
function createFormData(data) {
  return function () {
    var formData = new _formData2["default"]();
    var uploadStream = (0, _fs.createReadStream)(data.taxonomy);
    formData.append('taxonomy', uploadStream);
    return formData;
  };
}